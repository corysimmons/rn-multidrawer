"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[924],{6475:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"This guide will walk you through creating your first drawer with React Native MultiDrawer.","source":"@site/docs/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/rn-multidrawer/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/fisher/rn-multidrawer/tree/main/docs/docs/getting-started.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/rn-multidrawer/installation"},"next":{"title":"DrawerProvider","permalink":"/rn-multidrawer/api/drawer-provider"}}');var i=n(4848),s=n(8453);const a={sidebar_position:3},o="Getting Started",l={},d=[{value:"Basic Setup",id:"basic-setup",level:2},{value:"Adding Your First Drawer",id:"adding-your-first-drawer",level:2},{value:"Adding Multiple Drawers",id:"adding-multiple-drawers",level:2},{value:"Customizing Drawer Behavior",id:"customizing-drawer-behavior",level:2},{value:"Render Prop Parameters",id:"render-prop-parameters",level:2},{value:"Layout Options",id:"layout-options",level:2},{value:"Using the Hook API",id:"using-the-hook-api",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,i.jsx)(r.p,{children:"This guide will walk you through creating your first drawer with React Native MultiDrawer."}),"\n",(0,i.jsx)(r.h2,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,i.jsxs)(r.p,{children:["All drawers must be wrapped in a ",(0,i.jsx)(r.code,{children:"DrawerProvider"}),". This component manages global state and gesture detection:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:"import React from 'react';\nimport { DrawerProvider } from 'react-native-multidrawer';\nimport { View, Text } from 'react-native';\n\nexport default function App() {\n  return (\n    <DrawerProvider>\n      {/* Your app content goes here */}\n      <View style={{ flex: 1 }}>\n        <Text>Main App Content</Text>\n      </View>\n    </DrawerProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"adding-your-first-drawer",children:"Adding Your First Drawer"}),"\n",(0,i.jsxs)(r.p,{children:["The simplest way to add a drawer is using the ",(0,i.jsx)(r.code,{children:"Drawer"})," component with a render prop:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:"import React from 'react';\nimport { DrawerProvider, Drawer } from 'react-native-multidrawer';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <DrawerProvider>\n      <Drawer side=\"left\">\n        {({ progress }) => (\n          <View style={styles.drawer}>\n            <Text style={styles.drawerText}>Left Drawer</Text>\n            <Text>Progress: {progress.toFixed(2)}</Text>\n          </View>\n        )}\n      </Drawer>\n      \n      <View style={styles.main}>\n        <Text>Swipe from the left edge to open the drawer!</Text>\n      </View>\n    </DrawerProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f0f0f0',\n  },\n  drawer: {\n    flex: 1,\n    backgroundColor: '#3498db',\n    padding: 20,\n    justifyContent: 'center',\n  },\n  drawerText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'white',\n    marginBottom: 10,\n  },\n});\n"})}),"\n",(0,i.jsx)(r.h2,{id:"adding-multiple-drawers",children:"Adding Multiple Drawers"}),"\n",(0,i.jsx)(r.p,{children:"You can easily add drawers from multiple edges:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:"import React from 'react';\nimport { DrawerProvider, Drawer } from 'react-native-multidrawer';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <DrawerProvider>\n      {/* Left drawer */}\n      <Drawer side=\"left\">\n        {() => (\n          <View style={[styles.drawer, { backgroundColor: '#3498db' }]}>\n            <Text style={styles.drawerText}>Left Menu</Text>\n          </View>\n        )}\n      </Drawer>\n      \n      {/* Right drawer */}\n      <Drawer side=\"right\">\n        {() => (\n          <View style={[styles.drawer, { backgroundColor: '#e74c3c' }]}>\n            <Text style={styles.drawerText}>Right Panel</Text>\n          </View>\n        )}\n      </Drawer>\n      \n      {/* Top drawer */}\n      <Drawer side=\"top\">\n        {() => (\n          <View style={[styles.drawer, { backgroundColor: '#2ecc71' }]}>\n            <Text style={styles.drawerText}>Top Notifications</Text>\n          </View>\n        )}\n      </Drawer>\n      \n      {/* Bottom drawer */}\n      <Drawer side=\"bottom\">\n        {() => (\n          <View style={[styles.drawer, { backgroundColor: '#f39c12' }]}>\n            <Text style={styles.drawerText}>Bottom Sheet</Text>\n          </View>\n        )}\n      </Drawer>\n      \n      <View style={styles.main}>\n        <Text>Swipe from any edge!</Text>\n      </View>\n    </DrawerProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f0f0f0',\n  },\n  drawer: {\n    flex: 1,\n    padding: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  drawerText: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n});\n"})}),"\n",(0,i.jsx)(r.h2,{id:"customizing-drawer-behavior",children:"Customizing Drawer Behavior"}),"\n",(0,i.jsx)(r.p,{children:"You can customize various aspects of drawer behavior:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:"<Drawer \n  side=\"left\"\n  hitboxSize={20}           // Gesture detection area (default: 15)\n  snapOpenThreshold={0.5}   // How much to drag before auto-opening (default: 0.5)\n  springConfig={{           // Animation spring configuration\n    damping: 20,\n    stiffness: 300,\n  }}\n>\n  {({ progress, isOpen, close }) => (\n    <View style={styles.drawer}>\n      <Text>Drawer is {isOpen ? 'open' : 'closed'}</Text>\n      <TouchableOpacity onPress={close}>\n        <Text>Close Drawer</Text>\n      </TouchableOpacity>\n    </View>\n  )}\n</Drawer>\n"})}),"\n",(0,i.jsx)(r.h2,{id:"render-prop-parameters",children:"Render Prop Parameters"}),"\n",(0,i.jsx)(r.p,{children:"The render prop function receives several useful parameters:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"progress"})," - Animation progress from 0 (closed) to 1 (open)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"isOpen"})," - Boolean indicating if the drawer is fully open"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"close"})," - Function to programmatically close the drawer"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"open"})," - Function to programmatically open the drawer"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"layout-options",children:"Layout Options"}),"\n",(0,i.jsxs)(r.p,{children:["You can control how drawers arrange themselves using the ",(0,i.jsx)(r.code,{children:"layout"})," prop on ",(0,i.jsx)(r.code,{children:"DrawerProvider"}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:'<DrawerProvider layout="vertical-priority">\n  {/* Left/right drawers will be full height */}\n  {/* Top/bottom drawers will fit remaining width */}\n</DrawerProvider>\n'})}),"\n",(0,i.jsx)(r.p,{children:"Available layouts include:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"fullscreen"})," (default) - All drawers cover full screen"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"vertical-priority"})," - Left/right full height, top/bottom fit width"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"horizontal-priority"})," - Top/bottom full width, left/right fit height"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"using-the-hook-api",children:"Using the Hook API"}),"\n",(0,i.jsxs)(r.p,{children:["For maximum control, you can use the ",(0,i.jsx)(r.code,{children:"useDrawerState"})," hook:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:"import React from 'react';\nimport { DrawerProvider, useDrawerState } from 'react-native-multidrawer';\nimport { View, Text, TouchableOpacity } from 'react-native';\n\nfunction MyCustomDrawer() {\n  const { progress, isOpen, open, close } = useDrawerState('left');\n  \n  return (\n    <View style={styles.main}>\n      <Text>Drawer progress: {progress.toFixed(2)}</Text>\n      <TouchableOpacity onPress={isOpen ? close : open}>\n        <Text>{isOpen ? 'Close' : 'Open'} Drawer</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <DrawerProvider>\n      <MyCustomDrawer />\n    </DrawerProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(r.p,{children:"Now that you have a basic drawer working, explore these topics:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"api/drawer-provider",children:(0,i.jsx)(r.strong,{children:"API Reference"})})," - Detailed documentation for all components"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"guides/layouts",children:(0,i.jsx)(r.strong,{children:"Layouts Guide"})})," - Learn about different drawer arrangements"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"guides/advanced-usage",children:(0,i.jsx)(r.strong,{children:"Advanced Usage"})})," - Animation customization and performance tips"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"examples/simple-drawer",children:(0,i.jsx)(r.strong,{children:"Examples"})})," - Real-world implementation examples"]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);