"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[502],{914:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"examples/multi-drawer","title":"Multi-Drawer Example","description":"This example demonstrates how to use multiple drawers from different edges, creating a comprehensive interface with navigation, notifications, filters, and quick actions.","source":"@site/docs/examples/multi-drawer.md","sourceDirName":"examples","slug":"/examples/multi-drawer","permalink":"/rn-multidrawer/examples/multi-drawer","draft":false,"unlisted":false,"editUrl":"https://github.com/fisher/rn-multidrawer/tree/main/docs/docs/examples/multi-drawer.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Simple Drawer","permalink":"/rn-multidrawer/examples/simple-drawer"},"next":{"title":"Custom Layouts","permalink":"/rn-multidrawer/examples/custom-layouts"}}');var o=t(4848),s=t(8453);const r={sidebar_position:2},a="Multi-Drawer Example",l={},c=[{value:"Preview",id:"preview",level:2},{value:"Complete Code",id:"complete-code",level:2},{value:"Key Features",id:"key-features",level:2},{value:"1. Four Independent Drawers",id:"1-four-independent-drawers",level:3},{value:"2. Different Snap Thresholds",id:"2-different-snap-thresholds",level:3},{value:"3. Progress-Based Animations",id:"3-progress-based-animations",level:3},{value:"4. Collision Prevention",id:"4-collision-prevention",level:3},{value:"5. Contextual Content",id:"5-contextual-content",level:3},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Navigation (Left)",id:"navigation-left",level:3},{value:"Settings (Right)",id:"settings-right",level:3},{value:"Notifications (Top)",id:"notifications-top",level:3},{value:"Quick Actions (Bottom)",id:"quick-actions-bottom",level:3},{value:"Customization Tips",id:"customization-tips",level:2},{value:"Different Layouts",id:"different-layouts",level:3},{value:"Conditional Drawers",id:"conditional-drawers",level:3},{value:"Coordinated Actions",id:"coordinated-actions",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"multi-drawer-example",children:"Multi-Drawer Example"})}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates how to use multiple drawers from different edges, creating a comprehensive interface with navigation, notifications, filters, and quick actions."}),"\n",(0,o.jsx)(n.h2,{id:"preview",children:"Preview"}),"\n",(0,o.jsx)(n.p,{children:"A complete interface with:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Left drawer: Navigation menu"}),"\n",(0,o.jsx)(n.li,{children:"Right drawer: Settings panel"}),"\n",(0,o.jsx)(n.li,{children:"Top drawer: Notifications"}),"\n",(0,o.jsx)(n.li,{children:"Bottom drawer: Quick actions"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"complete-code",children:"Complete Code"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  SafeAreaView,\n  ScrollView,\n  Switch,\n} from 'react-native';\nimport { DrawerProvider, Drawer } from 'react-native-multidrawer';\n\nexport default function App() {\n  return (\n    <DrawerProvider options={{ layout: 'fullscreen' }}>\n      {/* Left Navigation Drawer */}\n      <Drawer side=\"left\" hitboxSize={20}>\n        {({ close }) => <NavigationDrawer onClose={close} />}\n      </Drawer>\n\n      {/* Right Settings Drawer */}\n      <Drawer side=\"right\" hitboxSize={20}>\n        {({ close }) => <SettingsDrawer onClose={close} />}\n      </Drawer>\n\n      {/* Top Notifications Drawer */}\n      <Drawer side=\"top\" snapOpenThreshold={0.3}>\n        {({ close, progress }) => (\n          <NotificationsDrawer onClose={close} progress={progress} />\n        )}\n      </Drawer>\n\n      {/* Bottom Actions Drawer */}\n      <Drawer side=\"bottom\" snapOpenThreshold={0.2}>\n        {({ close, progress }) => (\n          <ActionsDrawer onClose={close} progress={progress} />\n        )}\n      </Drawer>\n\n      {/* Main Content */}\n      <MainContent />\n    </DrawerProvider>\n  );\n}\n\n// Left Navigation Drawer\nfunction NavigationDrawer({ onClose }: { onClose: () => void }) {\n  const menuItems = [\n    { title: 'Dashboard', icon: '\ud83d\udcca' },\n    { title: 'Projects', icon: '\ud83d\udcc1' },\n    { title: 'Tasks', icon: '\u2705' },\n    { title: 'Calendar', icon: '\ud83d\udcc5' },\n    { title: 'Reports', icon: '\ud83d\udcc8' },\n  ];\n\n  return (\n    <SafeAreaView style={[styles.drawer, styles.leftDrawer]}>\n      <View style={styles.drawerHeader}>\n        <Text style={styles.drawerTitle}>Menu</Text>\n        <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n          <Text style={styles.closeText}>\u2715</Text>\n        </TouchableOpacity>\n      </View>\n      \n      <ScrollView style={styles.menuContainer}>\n        {menuItems.map((item, index) => (\n          <TouchableOpacity\n            key={index}\n            style={styles.menuItem}\n            onPress={() => {\n              console.log(`Navigate to ${item.title}`);\n              onClose();\n            }}\n          >\n            <Text style={styles.menuIcon}>{item.icon}</Text>\n            <Text style={styles.menuText}>{item.title}</Text>\n          </TouchableOpacity>\n        ))}\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\n// Right Settings Drawer\nfunction SettingsDrawer({ onClose }: { onClose: () => void }) {\n  const [darkMode, setDarkMode] = useState(false);\n  const [notifications, setNotifications] = useState(true);\n  const [soundEffects, setSoundEffects] = useState(true);\n\n  return (\n    <SafeAreaView style={[styles.drawer, styles.rightDrawer]}>\n      <View style={styles.drawerHeader}>\n        <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n          <Text style={styles.closeText}>\u2715</Text>\n        </TouchableOpacity>\n        <Text style={styles.drawerTitle}>Settings</Text>\n      </View>\n      \n      <ScrollView style={styles.settingsContainer}>\n        <View style={styles.settingItem}>\n          <Text style={styles.settingLabel}>Dark Mode</Text>\n          <Switch\n            value={darkMode}\n            onValueChange={setDarkMode}\n            trackColor={{ false: '#767577', true: '#3498db' }}\n          />\n        </View>\n        \n        <View style={styles.settingItem}>\n          <Text style={styles.settingLabel}>Notifications</Text>\n          <Switch\n            value={notifications}\n            onValueChange={setNotifications}\n            trackColor={{ false: '#767577', true: '#3498db' }}\n          />\n        </View>\n        \n        <View style={styles.settingItem}>\n          <Text style={styles.settingLabel}>Sound Effects</Text>\n          <Switch\n            value={soundEffects}\n            onValueChange={setSoundEffects}\n            trackColor={{ false: '#767577', true: '#3498db' }}\n          />\n        </View>\n        \n        <TouchableOpacity style={styles.settingButton}>\n          <Text style={styles.settingButtonText}>Account Settings</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity style={styles.settingButton}>\n          <Text style={styles.settingButtonText}>Privacy Policy</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity style={styles.settingButton}>\n          <Text style={styles.settingButtonText}>Terms of Service</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\n// Top Notifications Drawer\nfunction NotificationsDrawer({ onClose, progress }: any) {\n  const notifications = [\n    { id: 1, title: 'New message', time: '2m ago', type: 'message' },\n    { id: 2, title: 'Task completed', time: '5m ago', type: 'task' },\n    { id: 3, title: 'Meeting reminder', time: '10m ago', type: 'calendar' },\n    { id: 4, title: 'System update', time: '1h ago', type: 'system' },\n  ];\n\n  return (\n    <View style={[\n      styles.drawer, \n      styles.topDrawer,\n      { opacity: progress * 0.95 + 0.05 }\n    ]}>\n      <SafeAreaView>\n        <View style={styles.drawerHeader}>\n          <Text style={styles.drawerTitle}>Notifications</Text>\n          <TouchableOpacity onPress={onClose} style={styles.closeButton}>\n            <Text style={styles.closeText}>\u2715</Text>\n          </TouchableOpacity>\n        </View>\n        \n        <ScrollView style={styles.notificationsContainer}>\n          {notifications.map((notification) => (\n            <TouchableOpacity key={notification.id} style={styles.notificationItem}>\n              <View style={styles.notificationContent}>\n                <Text style={styles.notificationTitle}>{notification.title}</Text>\n                <Text style={styles.notificationTime}>{notification.time}</Text>\n              </View>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </SafeAreaView>\n    </View>\n  );\n}\n\n// Bottom Actions Drawer\nfunction ActionsDrawer({ onClose, progress }: any) {\n  const actions = [\n    { title: 'New Task', icon: '\u2795', color: '#3498db' },\n    { title: 'Quick Note', icon: '\ud83d\udcdd', color: '#2ecc71' },\n    { title: 'Take Photo', icon: '\ud83d\udcf7', color: '#e74c3c' },\n    { title: 'Voice Memo', icon: '\ud83c\udfa4', color: '#f39c12' },\n  ];\n\n  return (\n    <View style={[\n      styles.drawer, \n      styles.bottomDrawer,\n      { \n        transform: [{ translateY: (1 - progress) * 20 }],\n        opacity: progress * 0.95 + 0.05 \n      }\n    ]}>\n      <SafeAreaView>\n        <View style={styles.actionsHeader}>\n          <View style={styles.pullIndicator} />\n          <Text style={styles.actionsTitle}>Quick Actions</Text>\n        </View>\n        \n        <View style={styles.actionsContainer}>\n          {actions.map((action, index) => (\n            <TouchableOpacity\n              key={index}\n              style={[styles.actionButton, { backgroundColor: action.color }]}\n              onPress={() => {\n                console.log(`Action: ${action.title}`);\n                onClose();\n              }}\n            >\n              <Text style={styles.actionIcon}>{action.icon}</Text>\n              <Text style={styles.actionTitle}>{action.title}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </SafeAreaView>\n    </View>\n  );\n}\n\n// Main Content\nfunction MainContent() {\n  return (\n    <SafeAreaView style={styles.main}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Multi-Drawer App</Text>\n        <Text style={styles.subtitle}>Swipe from any edge!</Text>\n      </View>\n      \n      <View style={styles.content}>\n        <View style={styles.instructionCard}>\n          <Text style={styles.instructionTitle}>Try These Gestures:</Text>\n          <Text style={styles.instruction}>\u2190 Swipe from left for navigation</Text>\n          <Text style={styles.instruction}>\u2192 Swipe from right for settings</Text>\n          <Text style={styles.instruction}>\u2193 Swipe from top for notifications</Text>\n          <Text style={styles.instruction}>\u2191 Swipe from bottom for quick actions</Text>\n        </View>\n        \n        <View style={styles.contentCard}>\n          <Text style={styles.cardTitle}>Welcome!</Text>\n          <Text style={styles.cardText}>\n            This example demonstrates how multiple drawers can work together \n            to create a comprehensive user interface. Each drawer serves a \n            different purpose and can be accessed independently.\n          </Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  // Main layout\n  main: {\n    flex: 1,\n    backgroundColor: '#f8f9fa',\n  },\n  header: {\n    padding: 20,\n    paddingTop: 40,\n    backgroundColor: 'white',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#2c3e50',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#7f8c8d',\n    marginTop: 4,\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  \n  // Drawer base styles\n  drawer: {\n    flex: 1,\n  },\n  drawerHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: 'rgba(255,255,255,0.1)',\n  },\n  drawerTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: 'white',\n  },\n  closeButton: {\n    width: 30,\n    height: 30,\n    borderRadius: 15,\n    backgroundColor: 'rgba(255,255,255,0.2)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  closeText: {\n    color: 'white',\n    fontSize: 16,\n  },\n  \n  // Left drawer (navigation)\n  leftDrawer: {\n    backgroundColor: '#2c3e50',\n  },\n  menuContainer: {\n    flex: 1,\n  },\n  menuItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: 'rgba(255,255,255,0.1)',\n  },\n  menuIcon: {\n    fontSize: 20,\n    marginRight: 12,\n  },\n  menuText: {\n    color: 'white',\n    fontSize: 16,\n  },\n  \n  // Right drawer (settings)\n  rightDrawer: {\n    backgroundColor: '#34495e',\n  },\n  settingsContainer: {\n    flex: 1,\n    padding: 16,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 12,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: 'rgba(255,255,255,0.1)',\n  },\n  settingLabel: {\n    color: 'white',\n    fontSize: 16,\n  },\n  settingButton: {\n    paddingVertical: 12,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: 'rgba(255,255,255,0.1)',\n  },\n  settingButtonText: {\n    color: '#3498db',\n    fontSize: 16,\n  },\n  \n  // Top drawer (notifications)\n  topDrawer: {\n    backgroundColor: '#27ae60',\n    maxHeight: 300,\n  },\n  notificationsContainer: {\n    flex: 1,\n  },\n  notificationItem: {\n    padding: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: 'rgba(255,255,255,0.2)',\n  },\n  notificationContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  notificationTitle: {\n    color: 'white',\n    fontSize: 16,\n    flex: 1,\n  },\n  notificationTime: {\n    color: 'rgba(255,255,255,0.8)',\n    fontSize: 14,\n  },\n  \n  // Bottom drawer (actions)\n  bottomDrawer: {\n    backgroundColor: '#8e44ad',\n    maxHeight: 200,\n  },\n  actionsHeader: {\n    alignItems: 'center',\n    paddingTop: 8,\n    paddingBottom: 16,\n  },\n  pullIndicator: {\n    width: 40,\n    height: 4,\n    backgroundColor: 'rgba(255,255,255,0.3)',\n    borderRadius: 2,\n    marginBottom: 12,\n  },\n  actionsTitle: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingHorizontal: 20,\n  },\n  actionButton: {\n    alignItems: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    minWidth: 70,\n  },\n  actionIcon: {\n    fontSize: 24,\n    marginBottom: 4,\n  },\n  actionTitle: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  \n  // Content cards\n  instructionCard: {\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 20,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  instructionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#2c3e50',\n    marginBottom: 12,\n  },\n  instruction: {\n    fontSize: 14,\n    color: '#7f8c8d',\n    marginBottom: 6,\n  },\n  contentCard: {\n    backgroundColor: 'white',\n    borderRadius: 8,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#2c3e50',\n    marginBottom: 10,\n  },\n  cardText: {\n    fontSize: 14,\n    color: '#7f8c8d',\n    lineHeight: 20,\n  },\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,o.jsx)(n.h3,{id:"1-four-independent-drawers",children:"1. Four Independent Drawers"}),"\n",(0,o.jsx)(n.p,{children:"Each drawer serves a specific purpose and can be opened independently."}),"\n",(0,o.jsx)(n.h3,{id:"2-different-snap-thresholds",children:"2. Different Snap Thresholds"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Top drawer: Opens with just 30% drag (notifications are quick to check)"}),"\n",(0,o.jsx)(n.li,{children:"Bottom drawer: Opens with 20% drag (quick actions should be easily accessible)"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-progress-based-animations",children:"3. Progress-Based Animations"}),"\n",(0,o.jsx)(n.p,{children:"Top and bottom drawers use the progress value for smooth opacity and transform effects."}),"\n",(0,o.jsx)(n.h3,{id:"4-collision-prevention",children:"4. Collision Prevention"}),"\n",(0,o.jsx)(n.p,{children:"The DrawerProvider automatically prevents multiple drawers from being open simultaneously."}),"\n",(0,o.jsx)(n.h3,{id:"5-contextual-content",children:"5. Contextual Content"}),"\n",(0,o.jsx)(n.p,{children:"Each drawer contains relevant content for its position and purpose."}),"\n",(0,o.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"navigation-left",children:"Navigation (Left)"}),"\n",(0,o.jsx)(n.p,{children:"Traditional app navigation with menu items and user actions."}),"\n",(0,o.jsx)(n.h3,{id:"settings-right",children:"Settings (Right)"}),"\n",(0,o.jsx)(n.p,{children:"Configuration options with toggles and preference controls."}),"\n",(0,o.jsx)(n.h3,{id:"notifications-top",children:"Notifications (Top)"}),"\n",(0,o.jsx)(n.p,{children:"Quick access to recent alerts and messages."}),"\n",(0,o.jsx)(n.h3,{id:"quick-actions-bottom",children:"Quick Actions (Bottom)"}),"\n",(0,o.jsx)(n.p,{children:"Fast access to common tasks and creation actions."}),"\n",(0,o.jsx)(n.h2,{id:"customization-tips",children:"Customization Tips"}),"\n",(0,o.jsx)(n.h3,{id:"different-layouts",children:"Different Layouts"}),"\n",(0,o.jsx)(n.p,{children:"Try different layout configurations:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DrawerProvider options={{ layout: 'sidebar-layout' }}>\n  {/* Left/right drawers full height, top/bottom fit remaining width */}\n</DrawerProvider>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"conditional-drawers",children:"Conditional Drawers"}),"\n",(0,o.jsx)(n.p,{children:"Show/hide drawers based on app state:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'{user.isLoggedIn && (\n  <Drawer side="left">\n    {/* Navigation only for logged-in users */}\n  </Drawer>\n)}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"coordinated-actions",children:"Coordinated Actions"}),"\n",(0,o.jsx)(n.p,{children:"Make drawers work together:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const handleNavigate = (screen: string) => {\n  // Close all other drawers when navigating\n  settingsClose();\n  notificationsClose();\n  actionsClose();\n  navigate(screen);\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lazy loading"}),": Load drawer content only when first opened"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Memoization"}),": Use React.memo for drawer components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Virtualization"}),": Use FlatList for long lists in drawers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Debouncing"}),": Debounce rapid gesture events"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"./custom-layouts",children:"Custom Layouts"})," - Advanced layout configurations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"../guides/layouts",children:"Layouts Guide"})," - Detailed layout system documentation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"../guides/advanced-usage",children:"Advanced Usage"})," - Performance and customization techniques"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);