"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[212],{8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>o});var a=n(6540);const s={},i=a.createContext(s);function t(e){const r=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(i.Provider,{value:r},e.children)}},8567:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"api/types","title":"Types","description":"This page documents all TypeScript types exported by React Native MultiDrawer.","source":"@site/docs/api/types.md","sourceDirName":"api","slug":"/api/types","permalink":"/rn-multidrawer/api/types","draft":false,"unlisted":false,"editUrl":"https://github.com/fisher/rn-multidrawer/tree/main/docs/docs/api/types.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"useDrawerState","permalink":"/rn-multidrawer/api/use-drawer-state"},"next":{"title":"Basic Usage","permalink":"/rn-multidrawer/guides/basic-usage"}}');var s=n(4848),i=n(8453);const t={sidebar_position:4},o="Types",d={},l=[{value:"Core Types",id:"core-types",level:2},{value:"<code>DrawerSide</code>",id:"drawerside",level:3},{value:"<code>DrawerLayout</code>",id:"drawerlayout",level:3},{value:"Component Props",id:"component-props",level:2},{value:"<code>DrawerProviderProps</code>",id:"drawerproviderprops",level:3},{value:"<code>DrawerOptions</code>",id:"draweroptions",level:3},{value:"<code>DrawerProps</code>",id:"drawerprops",level:3},{value:"<code>DrawerRenderProps</code>",id:"drawerrenderprops",level:3},{value:"Configuration Types",id:"configuration-types",level:2},{value:"<code>DrawerConfig</code>",id:"drawerconfig",level:3},{value:"Context Types",id:"context-types",level:2},{value:"<code>DrawerContextValue</code>",id:"drawercontextvalue",level:3},{value:"<code>DrawerBounds</code>",id:"drawerbounds",level:3},{value:"Hook Return Types",id:"hook-return-types",level:2},{value:"<code>DrawerState</code> (from <code>useDrawerState</code>)",id:"drawerstate-from-usedrawerstate",level:3},{value:"Animation State Types",id:"animation-state-types",level:2},{value:"<code>AnimationState</code>",id:"animationstate",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Type-safe Drawer Configuration",id:"type-safe-drawer-configuration",level:3},{value:"Type-safe Render Props",id:"type-safe-render-props",level:3},{value:"Type-safe Layout Configuration",id:"type-safe-layout-configuration",level:3},{value:"Generic Constraints",id:"generic-constraints",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"types",children:"Types"})}),"\n",(0,s.jsx)(r.p,{children:"This page documents all TypeScript types exported by React Native MultiDrawer."}),"\n",(0,s.jsx)(r.h2,{id:"core-types",children:"Core Types"}),"\n",(0,s.jsx)(r.h3,{id:"drawerside",children:(0,s.jsx)(r.code,{children:"DrawerSide"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"type DrawerSide = 'top' | 'right' | 'bottom' | 'left';\n"})}),"\n",(0,s.jsx)(r.p,{children:"Specifies which edge of the screen a drawer slides from."}),"\n",(0,s.jsx)(r.h3,{id:"drawerlayout",children:(0,s.jsx)(r.code,{children:"DrawerLayout"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"type DrawerLayout = \n  | 'fullscreen'           // All drawers cover full screen dimensions (default)\n  | 'sidebar-layout'       // Left/Right full height, Top/Bottom fit remaining width  \n  | 'header-footer-layout' // Top/Bottom full width, Left/Right fit remaining height\n  | 'corner-aware';        // All drawers respect each other's corners\n"})}),"\n",(0,s.jsx)(r.p,{children:"Layout configuration that determines how drawers are positioned relative to each other."}),"\n",(0,s.jsx)(r.h2,{id:"component-props",children:"Component Props"}),"\n",(0,s.jsx)(r.h3,{id:"drawerproviderprops",children:(0,s.jsx)(r.code,{children:"DrawerProviderProps"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerProviderProps {\n  children: React.ReactNode;\n  options?: DrawerOptions;\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Props for the ",(0,s.jsx)(r.code,{children:"DrawerProvider"})," component."]}),"\n",(0,s.jsx)(r.h3,{id:"draweroptions",children:(0,s.jsx)(r.code,{children:"DrawerOptions"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerOptions {\n  layout?: DrawerLayout;\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"Configuration options for the drawer system."}),"\n",(0,s.jsx)(r.h3,{id:"drawerprops",children:(0,s.jsx)(r.code,{children:"DrawerProps"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerProps {\n  side: DrawerSide;\n  hitboxSize?: number;\n  snapOpenThreshold?: number;\n  snapCloseThreshold?: number;\n  animationSpeed?: number;\n  bounciness?: number;\n  children: React.ReactNode | ((props: DrawerRenderProps) => React.ReactNode);\n  style?: ViewStyle;\n  className?: string; // Web only\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Props for the ",(0,s.jsx)(r.code,{children:"Drawer"})," component."]}),"\n",(0,s.jsx)(r.h3,{id:"drawerrenderprops",children:(0,s.jsx)(r.code,{children:"DrawerRenderProps"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerRenderProps {\n  animatedStyle: AnimatedStyle;\n  isOpen: boolean;\n  progress: SharedValue<number>;\n  animationState: SharedValue<'gesture' | 'spring' | 'static'>;\n  width: number;\n  height: number;\n  open: () => void;\n  close: () => void;\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Props passed to render prop functions in the ",(0,s.jsx)(r.code,{children:"Drawer"})," component."]}),"\n",(0,s.jsx)(r.h2,{id:"configuration-types",children:"Configuration Types"}),"\n",(0,s.jsx)(r.h3,{id:"drawerconfig",children:(0,s.jsx)(r.code,{children:"DrawerConfig"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerConfig {\n  hitboxSize: number;\n  snapOpenThreshold: number;\n  snapCloseThreshold: number;\n  animationSpeed: number;\n  bounciness: number;\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Complete drawer configuration object. Used internally and in the ",(0,s.jsx)(r.code,{children:"useDrawerState"})," hook."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Default values:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.code,{children:"hitboxSize: 15"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.code,{children:"snapOpenThreshold: 0.5"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.code,{children:"snapCloseThreshold: 0.5"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.code,{children:"animationSpeed: 0.8"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.code,{children:"bounciness: 0.1"})}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"context-types",children:"Context Types"}),"\n",(0,s.jsx)(r.h3,{id:"drawercontextvalue",children:(0,s.jsx)(r.code,{children:"DrawerContextValue"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerContextValue {\n  // State management\n  activeDrawer: DrawerSide | null;\n  setActiveDrawer: (side: DrawerSide | null) => void;\n  isDrawerOpen: (side: DrawerSide) => boolean;\n  openDrawer: (side: DrawerSide) => void;\n  openDrawerAnimated: (side: DrawerSide) => void;\n  closeDrawer: (side: DrawerSide) => void;\n  closeDrawerAnimated: (side: DrawerSide) => void;\n  \n  // Layout and positioning\n  layout: DrawerLayout;\n  getDrawerZIndex: (side: DrawerSide) => number;\n  updateDrawerBounds: (side: DrawerSide, bounds: DrawerBounds) => void;\n  measuredDrawerBounds: Record<DrawerSide, DrawerBounds | null>;\n  \n  // Animation values (React Native Reanimated SharedValues)\n  translationX: SharedValue<number>;\n  translationY: SharedValue<number>;\n  targetProgress: Record<DrawerSide, SharedValue<number>>;\n  currentProgress: Record<DrawerSide, SharedValue<number>>;\n  animationState: Record<DrawerSide, SharedValue<'gesture' | 'spring' | 'static'>>;\n  \n  // Animation control\n  snapToPosition: (side: DrawerSide, progress: number) => void;\n  \n  // Platform-specific utilities\n  setGlobalUserSelectNone: () => void;      // Web only\n  removeGlobalUserSelectNone: () => void;   // Web only\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The complete context value provided by ",(0,s.jsx)(r.code,{children:"DrawerProvider"}),". Most of these are internal APIs."]}),"\n",(0,s.jsx)(r.h3,{id:"drawerbounds",children:(0,s.jsx)(r.code,{children:"DrawerBounds"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerBounds {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"Drawer position and dimensions."}),"\n",(0,s.jsx)(r.h2,{id:"hook-return-types",children:"Hook Return Types"}),"\n",(0,s.jsxs)(r.h3,{id:"drawerstate-from-usedrawerstate",children:[(0,s.jsx)(r.code,{children:"DrawerState"})," (from ",(0,s.jsx)(r.code,{children:"useDrawerState"}),")"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"interface DrawerState {\n  // State\n  progress: SharedValue<number>;\n  isOpen: boolean;\n  animationState: SharedValue<'gesture' | 'spring' | 'static'>;\n  \n  // Controls\n  open: () => void;\n  close: () => void;\n  snapToPosition: (targetProgress: number) => void;\n  \n  // Dimensions\n  width: number;\n  height: number;\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Return type of the ",(0,s.jsx)(r.code,{children:"useDrawerState"})," hook."]}),"\n",(0,s.jsx)(r.h2,{id:"animation-state-types",children:"Animation State Types"}),"\n",(0,s.jsx)(r.h3,{id:"animationstate",children:(0,s.jsx)(r.code,{children:"AnimationState"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"type AnimationState = 'gesture' | 'spring' | 'static';\n"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"'gesture'"})," - User is actively dragging the drawer"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"'spring'"})," - Spring animation is currently running"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"'static'"})," - Drawer is at rest, no animation active"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(r.h3,{id:"type-safe-drawer-configuration",children:"Type-safe Drawer Configuration"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"import { DrawerConfig, DrawerSide } from 'react-native-multidrawer';\n\nconst drawerConfig: Partial<DrawerConfig> = {\n  hitboxSize: 30,\n  snapOpenThreshold: 0.3,\n  animationSpeed: 1.2,\n};\n\nconst drawerSide: DrawerSide = 'left';\n"})}),"\n",(0,s.jsx)(r.h3,{id:"type-safe-render-props",children:"Type-safe Render Props"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"import { DrawerRenderProps } from 'react-native-multidrawer';\n\nconst renderDrawerContent = ({ progress, isOpen, close }: DrawerRenderProps) => (\n  <View style={{ opacity: progress.value }}>\n    <Text>{isOpen ? 'Open' : 'Closed'}</Text>\n    <TouchableOpacity onPress={close}>\n      <Text>Close</Text>\n    </TouchableOpacity>\n  </View>\n);\n\n<Drawer side=\"left\">\n  {renderDrawerContent}\n</Drawer>\n"})}),"\n",(0,s.jsx)(r.h3,{id:"type-safe-layout-configuration",children:"Type-safe Layout Configuration"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"import { DrawerLayout, DrawerOptions } from 'react-native-multidrawer';\n\nconst layoutOptions: DrawerOptions = {\n  layout: 'sidebar-layout' as DrawerLayout,\n};\n\n<DrawerProvider options={layoutOptions}>\n  {/* Drawers */}\n</DrawerProvider>\n"})}),"\n",(0,s.jsx)(r.h2,{id:"generic-constraints",children:"Generic Constraints"}),"\n",(0,s.jsx)(r.p,{children:"When working with custom hooks or components that extend the drawer system, you can use these types as constraints:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"import { DrawerSide } from 'react-native-multidrawer';\n\nfunction useCustomDrawer<T extends DrawerSide>(side: T) {\n  // Custom hook implementation\n}\n\n// Usage with type safety\nconst leftDrawer = useCustomDrawer('left'); // T is inferred as 'left'\n"})}),"\n",(0,s.jsx)(r.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"./drawer-provider",children:"DrawerProvider API"})," - Provider component documentation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"./drawer",children:"Drawer API"})," - Drawer component documentation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.a,{href:"./use-drawer-state",children:"useDrawerState API"})," - Hook documentation"]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);