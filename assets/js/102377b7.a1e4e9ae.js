"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[726],{8073:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"guides/basic-usage","title":"Basic Usage","description":"This guide covers the fundamental concepts and common usage patterns for React Native MultiDrawer.","source":"@site/docs/guides/basic-usage.md","sourceDirName":"guides","slug":"/guides/basic-usage","permalink":"/rn-multidrawer/guides/basic-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/fisher/rn-multidrawer/tree/main/docs/docs/guides/basic-usage.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Types","permalink":"/rn-multidrawer/api/types"},"next":{"title":"Advanced Usage","permalink":"/rn-multidrawer/guides/advanced-usage"}}');var i=r(4848),t=r(8453);const o={sidebar_position:1},a="Basic Usage",l={},d=[{value:"Provider Setup",id:"provider-setup",level:2},{value:"Adding Drawers",id:"adding-drawers",level:2},{value:"Single Drawer",id:"single-drawer",level:3},{value:"Multiple Drawers",id:"multiple-drawers",level:3},{value:"Gesture Interaction",id:"gesture-interaction",level:2},{value:"Opening Drawers",id:"opening-drawers",level:3},{value:"Closing Drawers",id:"closing-drawers",level:3},{value:"Render Props",id:"render-props",level:2},{value:"Available Props",id:"available-props",level:3},{value:"Static Content",id:"static-content",level:2},{value:"Customizing Behavior",id:"customizing-behavior",level:2},{value:"Gesture Sensitivity",id:"gesture-sensitivity",level:3},{value:"Snap Thresholds",id:"snap-thresholds",level:3},{value:"Animation Speed",id:"animation-speed",level:3},{value:"Hook API",id:"hook-api",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Menu Drawer",id:"menu-drawer",level:3},{value:"Bottom Sheet",id:"bottom-sheet",level:3},{value:"Notification Panel",id:"notification-panel",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Drawer Not Opening",id:"drawer-not-opening",level:3},{value:"Poor Performance",id:"poor-performance",level:3},{value:"Gesture Conflicts",id:"gesture-conflicts",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basic-usage",children:"Basic Usage"})}),"\n",(0,i.jsx)(n.p,{children:"This guide covers the fundamental concepts and common usage patterns for React Native MultiDrawer."}),"\n",(0,i.jsx)(n.h2,{id:"provider-setup",children:"Provider Setup"}),"\n",(0,i.jsxs)(n.p,{children:["All drawer functionality requires wrapping your app in a ",(0,i.jsx)(n.code,{children:"DrawerProvider"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import React from 'react';\nimport { DrawerProvider } from 'react-native-multidrawer';\n\nexport default function App() {\n  return (\n    <DrawerProvider>\n      {/* Your app content */}\n    </DrawerProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The provider manages global state, gesture detection, and animations for all drawers in your app."}),"\n",(0,i.jsx)(n.h2,{id:"adding-drawers",children:"Adding Drawers"}),"\n",(0,i.jsx)(n.h3,{id:"single-drawer",children:"Single Drawer"}),"\n",(0,i.jsxs)(n.p,{children:["The most basic drawer setup uses the ",(0,i.jsx)(n.code,{children:"Drawer"})," component with a render prop:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { DrawerProvider, Drawer } from 'react-native-multidrawer';\nimport { View, Text, StyleSheet } from 'react-native';\n\nexport default function App() {\n  return (\n    <DrawerProvider>\n      <Drawer side=\"left\">\n        {() => (\n          <View style={styles.drawer}>\n            <Text>Left Drawer Content</Text>\n          </View>\n        )}\n      </Drawer>\n      \n      <View style={styles.main}>\n        <Text>Main Content</Text>\n      </View>\n    </DrawerProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  drawer: {\n    flex: 1,\n    backgroundColor: '#3498db',\n    padding: 20,\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-drawers",children:"Multiple Drawers"}),"\n",(0,i.jsx)(n.p,{children:"You can have up to four drawers (one from each edge):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"export default function App() {\n  return (\n    <DrawerProvider>\n      <Drawer side=\"left\">\n        {() => <View style={[styles.drawer, { backgroundColor: '#3498db' }]} />}\n      </Drawer>\n      \n      <Drawer side=\"right\">\n        {() => <View style={[styles.drawer, { backgroundColor: '#e74c3c' }]} />}\n      </Drawer>\n      \n      <Drawer side=\"top\">\n        {() => <View style={[styles.drawer, { backgroundColor: '#2ecc71' }]} />}\n      </Drawer>\n      \n      <Drawer side=\"bottom\">\n        {() => <View style={[styles.drawer, { backgroundColor: '#f39c12' }]} />}\n      </Drawer>\n      \n      <View style={styles.main}>\n        <Text>Swipe from any edge!</Text>\n      </View>\n    </DrawerProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"gesture-interaction",children:"Gesture Interaction"}),"\n",(0,i.jsx)(n.h3,{id:"opening-drawers",children:"Opening Drawers"}),"\n",(0,i.jsx)(n.p,{children:"Drawers are opened by swiping from the screen edge:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Left drawer"}),": Swipe right from left edge"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Right drawer"}),": Swipe left from right edge"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Top drawer"}),": Swipe down from top edge"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bottom drawer"}),": Swipe up from bottom edge"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The gesture detection area size is controlled by the ",(0,i.jsx)(n.code,{children:"hitboxSize"})," prop (default 15px)."]}),"\n",(0,i.jsx)(n.h3,{id:"closing-drawers",children:"Closing Drawers"}),"\n",(0,i.jsx)(n.p,{children:"Open drawers can be closed by:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Swiping in the opposite direction"}),"\n",(0,i.jsxs)(n.li,{children:["Using the ",(0,i.jsx)(n.code,{children:"close"})," function from render props"]}),"\n",(0,i.jsxs)(n.li,{children:["Programmatically via ",(0,i.jsx)(n.code,{children:"useDrawerState"})," hook"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"render-props",children:"Render Props"}),"\n",(0,i.jsx)(n.p,{children:"The render prop function provides access to drawer state and controls:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<Drawer side=\"left\">\n  {({ progress, isOpen, close, open }) => (\n    <View style={styles.drawer}>\n      <Text>Progress: {progress.toFixed(2)}</Text>\n      <Text>Status: {isOpen ? 'Open' : 'Closed'}</Text>\n      \n      <TouchableOpacity onPress={close}>\n        <Text>Close Drawer</Text>\n      </TouchableOpacity>\n      \n      <TouchableOpacity onPress={open}>\n        <Text>Open Drawer</Text>\n      </TouchableOpacity>\n    </View>\n  )}\n</Drawer>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"available-props",children:"Available Props"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"progress"})," - Animation progress (0 = closed, 1 = open)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"isOpen"})," - Boolean indicating fully open state"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"close()"})," - Function to close the drawer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"open()"})," - Function to open the drawer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"width/height"})," - Drawer dimensions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"animatedStyle"})," - Pre-configured animated styles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"animationState"})," - Current animation state"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"static-content",children:"Static Content"}),"\n",(0,i.jsx)(n.p,{children:"For simple drawers that don't need dynamic behavior, you can pass static content:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Drawer side="right">\n  <View style={styles.drawer}>\n    <Text>Static Content</Text>\n    <Text>No render prop needed</Text>\n  </View>\n</Drawer>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"customizing-behavior",children:"Customizing Behavior"}),"\n",(0,i.jsx)(n.h3,{id:"gesture-sensitivity",children:"Gesture Sensitivity"}),"\n",(0,i.jsx)(n.p,{children:"Control how easily drawers open from the edge:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Drawer \n  side="left" \n  hitboxSize={30}  // Larger detection area\n>\n  {/* Easier to open */}\n</Drawer>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"snap-thresholds",children:"Snap Thresholds"}),"\n",(0,i.jsx)(n.p,{children:"Control when drawers auto-open or close:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Drawer \n  side="left"\n  snapOpenThreshold={0.3}   // Opens after 30% drag\n  snapCloseThreshold={0.7}  // Closes when less than 70% open\n>\n  {/* More sensitive snapping */}\n</Drawer>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"animation-speed",children:"Animation Speed"}),"\n",(0,i.jsx)(n.p,{children:"Adjust opening/closing animation speed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Drawer \n  side="left"\n  animationSpeed={1.5}  // 50% faster\n  bounciness={0.2}      // More bounce\n>\n  {/* Faster, bouncier animations */}\n</Drawer>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"hook-api",children:"Hook API"}),"\n",(0,i.jsxs)(n.p,{children:["For more control, use the ",(0,i.jsx)(n.code,{children:"useDrawerState"})," hook:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { useDrawerState } from 'react-native-multidrawer';\n\nfunction CustomDrawerControl() {\n  const { isOpen, open, close, progress } = useDrawerState('left');\n  \n  return (\n    <View>\n      <Text>Left drawer is {isOpen ? 'open' : 'closed'}</Text>\n      <Text>Progress: {progress.toFixed(2)}</Text>\n      \n      <TouchableOpacity onPress={isOpen ? close : open}>\n        <Text>{isOpen ? 'Close' : 'Open'} Left Drawer</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <DrawerProvider>\n      {/* Standard drawer component */}\n      <Drawer side=\"left\">\n        {() => <Text>Drawer Content</Text>}\n      </Drawer>\n      \n      {/* Custom control component */}\n      <CustomDrawerControl />\n    </DrawerProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"menu-drawer",children:"Menu Drawer"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"<Drawer side=\"left\" hitboxSize={20}>\n  {({ close }) => (\n    <ScrollView style={styles.menu}>\n      <TouchableOpacity onPress={() => { navigate('Home'); close(); }}>\n        <Text>Home</Text>\n      </TouchableOpacity>\n      <TouchableOpacity onPress={() => { navigate('Settings'); close(); }}>\n        <Text>Settings</Text>\n      </TouchableOpacity>\n    </ScrollView>\n  )}\n</Drawer>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bottom-sheet",children:"Bottom Sheet"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Drawer side="bottom" snapOpenThreshold={0.2}>\n  {({ progress }) => (\n    <View style={[styles.bottomSheet, { \n      opacity: progress,\n      transform: [{ scale: 0.9 + progress * 0.1 }]\n    }]}>\n      <Text>Pull up for more options</Text>\n    </View>\n  )}\n</Drawer>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"notification-panel",children:"Notification Panel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'<Drawer side="top" animationSpeed={0.6}>\n  {({ isOpen, close }) => (\n    <View style={styles.notifications}>\n      <Text>Notifications</Text>\n      {isOpen && (\n        <TouchableOpacity onPress={close}>\n          <Text>Dismiss</Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  )}\n</Drawer>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep drawers lightweight"})," - Avoid heavy computations in render props"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use stable references"})," - Memoize event handlers and styles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle edge cases"})," - Consider what happens when multiple gestures occur"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test on devices"})," - Gesture detection varies between platforms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Respect platform conventions"})," - Left drawers for menus, bottom for sheets"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"drawer-not-opening",children:"Drawer Not Opening"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Check if ",(0,i.jsx)(n.code,{children:"DrawerProvider"})," wraps your app"]}),"\n",(0,i.jsxs)(n.li,{children:["Verify ",(0,i.jsx)(n.code,{children:"hitboxSize"})," isn't too small"]}),"\n",(0,i.jsx)(n.li,{children:"Make sure no other gesture handlers conflict"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"poor-performance",children:"Poor Performance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Avoid heavy operations in render props"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"useAnimatedStyle"})," for custom animations"]}),"\n",(0,i.jsx)(n.li,{children:"Consider static content for simple drawers"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"gesture-conflicts",children:"Gesture Conflicts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only one drawer can be active at a time (automatic)"}),"\n",(0,i.jsx)(n.li,{children:"Check for conflicting gesture handlers in parent components"}),"\n",(0,i.jsxs)(n.li,{children:["Adjust ",(0,i.jsx)(n.code,{children:"hitboxSize"})," to avoid unintended triggers"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./advanced-usage",children:"Advanced Usage"})," - Custom animations and performance optimization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./layouts",children:"Layouts Guide"})," - Different drawer arrangement options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../examples/simple-drawer",children:"Examples"})," - Real-world implementation examples"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);